rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Rule for users collection - allow users to create and manage their own user documents
    match /users/{userId} {
      // Allow users to read and write only their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Special case for user creation during registration
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rule for medicalRecords collection
    match /medicalRecords/{recordId} {
      // Allow read if user ID matches (for both existing and new documents)
      allow read: if request.auth != null && 
                   (resource == null || request.auth.uid == resource.data.userId);
      
      // Allow create if user is setting their own userId
      allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.userId;
      
      // Allow update/delete if user owns the document
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }

    // Rule for familyMembers collection
    match /familyMembers/{memberId} {
      // Allow read if user ID matches (for both existing and new documents)
      allow read: if request.auth != null && 
                   (resource == null || request.auth.uid == resource.data.userId);
      
      // Allow create if user is setting their own userId
      allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.userId;
      
      // Allow update/delete if user owns the document
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }

    // Rule for appointments collection
    match /appointments/{appointmentId} {
      // Allow read if user ID matches (for both existing and new documents)
      allow read: if request.auth != null && 
                   (resource == null || request.auth.uid == resource.data.userId);
      
      // Allow create if user is setting their own userId
      allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.userId;
      
      // Allow update/delete if user owns the document
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }

    // Rule for insurance collection
    match /insurance/{insuranceId} {
      // Allow read if user ID matches (for both existing and new documents)
      allow read: if request.auth != null && 
                   (resource == null || request.auth.uid == resource.data.userId);
      
      // Allow create if user is setting their own userId
      allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.userId;
      
      // Allow update/delete if user owns the document
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }

    // Rule for test documents (used in diagnostics)
    match /test/{testId} {
      allow read, write: if request.auth != null;
    }

    // Rule for userPreferences collection
    match /userPreferences/{userId} {
      // Allow read/write only for the user's own preferences
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rule for familyInvitations collection
    match /familyInvitations/{invitationId} {
      // Allow read if user is the sender or the recipient
      allow read: if request.auth != null && 
                  (resource.data.senderId == request.auth.uid || 
                   resource.data.recipientEmail == request.auth.token.email);
      
      // Allow create if user is setting themselves as the sender
      allow create: if request.auth != null && 
                     request.resource.data.senderId == request.auth.uid;
      
      // Allow update if user is the sender or recipient
      allow update: if request.auth != null && 
                     (resource.data.senderId == request.auth.uid || 
                      resource.data.recipientEmail == request.auth.token.email);
                      
      // Only sender can delete
      allow delete: if request.auth != null &&
                     resource.data.senderId == request.auth.uid;
    }
    
    // Finance Module Rules
    
    // Rule for finance_accounts collection
    match /finance_accounts/{accountId} {
      // Helper function to check if user is a member of nuclear family
      function isNuclearFamilyMember(userId) {
        return exists(/databases/$(database)/documents/familyMembers/$(userId)) &&
               get(/databases/$(database)/documents/familyMembers/$(userId)).data.relationship in ['Self', 'Spouse', 'Child'];
      }
      
      // Helper function to check if user is a member of extended family
      function isExtendedFamilyMember(userId) {
        return exists(/databases/$(database)/documents/familyMembers/$(userId)) &&
               get(/databases/$(database)/documents/familyMembers/$(userId)).data.relationship in ['Parent', 'Sibling', 'Grandparent', 'Grandchild', 'Other'];
      }
      
      // Allow read access based on scope and sharing settings
      allow read: if request.auth != null && (
        // Owner can always read
        resource.data.owner == request.auth.uid ||
        // Shared with user explicitly
        request.auth.uid in resource.data.sharedWith ||
        // Nuclear family scope and user is a nuclear family member
        (resource.data.scope == 'nuclear' && isNuclearFamilyMember(request.auth.uid)) ||
        // Extended family scope and user is an extended family member
        (resource.data.scope == 'extended' && isExtendedFamilyMember(request.auth.uid))
      );
      
      // Allow create if user is setting themselves as the owner
      allow create: if request.auth != null && 
                     request.resource.data.owner == request.auth.uid;
      
      // Allow update if user is the owner or has explicit sharing access
      allow update: if request.auth != null && (
        resource.data.owner == request.auth.uid ||
        request.auth.uid in resource.data.sharedWith
      );
      
      // Only owner can delete
      allow delete: if request.auth != null &&
                     resource.data.owner == request.auth.uid;
    }
    
    // Rule for finance_transactions collection
    match /finance_transactions/{transactionId} {
      // Allow read if user has access to the associated account
      allow read: if request.auth != null && (
        // User created the transaction
        resource.data.createdBy == request.auth.uid ||
        // User has access to the account
        exists(/databases/$(database)/documents/finance_accounts/$(resource.data.accountId)) &&
        (
          get(/databases/$(database)/documents/finance_accounts/$(resource.data.accountId)).data.owner == request.auth.uid ||
          request.auth.uid in get(/databases/$(database)/documents/finance_accounts/$(resource.data.accountId)).data.sharedWith
        )
      );
      
      // Allow create if user has access to the account
      allow create: if request.auth != null && 
                     request.resource.data.createdBy == request.auth.uid &&
                     exists(/databases/$(database)/documents/finance_accounts/$(request.resource.data.accountId)) &&
                     (
                       get(/databases/$(database)/documents/finance_accounts/$(request.resource.data.accountId)).data.owner == request.auth.uid ||
                       request.auth.uid in get(/databases/$(database)/documents/finance_accounts/$(request.resource.data.accountId)).data.sharedWith
                     );
      
      // Allow update/delete if user created the transaction or is the account owner
      allow update, delete: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        exists(/databases/$(database)/documents/finance_accounts/$(resource.data.accountId)) &&
        get(/databases/$(database)/documents/finance_accounts/$(resource.data.accountId)).data.owner == request.auth.uid
      );
    }
    
    // Rule for finance_projects collection
    match /finance_projects/{projectId} {
      // Helper function to check if user is a contributor
      function isContributor(userId) {
        return resource.data.contributors.hasAny([userId]);
      }
      
      // Allow read if user is a contributor or created the project
      allow read: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        isContributor(request.auth.uid)
      );
      
      // Allow create if user is setting themselves as creator
      allow create: if request.auth != null && 
                     request.resource.data.createdBy == request.auth.uid;
      
      // Allow update if user is the creator
      allow update: if request.auth != null &&
                     resource.data.createdBy == request.auth.uid;
      
      // Only creator can delete
      allow delete: if request.auth != null &&
                     resource.data.createdBy == request.auth.uid;
    }
    
    // Rule for finance_loans collection
    match /finance_loans/{loanId} {
      // Allow read if user is involved in the loan
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        (resource.data.type == 'borrowed' && resource.data.lender == request.auth.uid) ||
        (resource.data.type == 'lent' && resource.data.borrower == request.auth.uid)
      );
      
      // Allow create if user is setting themselves as involved
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      
      // Allow update if user is involved in the loan
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        (resource.data.type == 'borrowed' && resource.data.lender == request.auth.uid) ||
        (resource.data.type == 'lent' && resource.data.borrower == request.auth.uid)
      );
      
      // Only loan creator can delete
      allow delete: if request.auth != null &&
                     resource.data.userId == request.auth.uid;
    }
    
    // Rule for finance_welfare_accounts collection
    match /finance_welfare_accounts/{welfareId} {
      // Helper function to check if user is a member
      function isMember(userId) {
        return resource.data.members[userId] != null;
      }
      
      // Allow read if user is a member or created the welfare account
      allow read: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        isMember(request.auth.uid)
      );
      
      // Allow create if user is setting themselves as creator
      allow create: if request.auth != null && 
                     request.resource.data.createdBy == request.auth.uid;
      
      // Allow update if user is the creator
      allow update: if request.auth != null &&
                     resource.data.createdBy == request.auth.uid;
      
      // Only creator can delete
      allow delete: if request.auth != null &&
                     resource.data.createdBy == request.auth.uid;
    }
  }
}
